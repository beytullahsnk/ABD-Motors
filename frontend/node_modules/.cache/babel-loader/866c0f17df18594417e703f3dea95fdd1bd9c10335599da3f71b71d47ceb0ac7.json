{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8000/api/auth';\nconst authService = {\n  login: async (email, password) => {\n    try {\n      const response = await axios.post(`${API_URL}/token/`, {\n        email,\n        password\n      });\n      if (response.data.access) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      console.error('Login error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      throw error;\n    }\n  },\n  register: async userData => {\n    try {\n      const response = await axios.post(`${API_URL}/users/`, {\n        ...userData,\n        username: userData.email,\n        is_active: true\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response3;\n      console.error('Register error:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n      if ((_error$response3 = error.response) !== null && _error$response3 !== void 0 && _error$response3.data) {\n        const errors = error.response.data;\n        if (typeof errors === 'object') {\n          const errorMessage = Object.entries(errors).map(([field, messages]) => `${field}: ${messages.join(', ')}`).join('\\n');\n          throw new Error(errorMessage);\n        }\n      }\n      throw error;\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('user');\n  },\n  getCurrentUser: () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  }\n};\nexport default authService;","map":{"version":3,"names":["axios","API_URL","authService","login","email","password","response","post","data","access","localStorage","setItem","JSON","stringify","error","_error$response","console","message","register","userData","username","is_active","_error$response2","_error$response3","errors","errorMessage","Object","entries","map","field","messages","join","Error","logout","removeItem","getCurrentUser","user","getItem","parse"],"sources":["/Users/beytullahsonkaya/Library/Mobile Documents/com~apple~CloudDocs/Documents/BTS/Hetic/Cours Python/Projet - ABD motors/ABD-Motors/frontend/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:8000/api/auth';\n\nconst authService = {\n    login: async (email, password) => {\n        try {\n            const response = await axios.post(`${API_URL}/token/`, {\n                email,\n                password\n            });\n            if (response.data.access) {\n                localStorage.setItem('user', JSON.stringify(response.data));\n            }\n            return response.data;\n        } catch (error) {\n            console.error('Login error:', error.response?.data || error.message);\n            throw error;\n        }\n    },\n\n    register: async (userData) => {\n        try {\n            const response = await axios.post(`${API_URL}/users/`, {\n                ...userData,\n                username: userData.email,\n                is_active: true\n            });\n            return response.data;\n        } catch (error) {\n            console.error('Register error:', error.response?.data || error.message);\n            if (error.response?.data) {\n                const errors = error.response.data;\n                if (typeof errors === 'object') {\n                    const errorMessage = Object.entries(errors)\n                        .map(([field, messages]) => `${field}: ${messages.join(', ')}`)\n                        .join('\\n');\n                    throw new Error(errorMessage);\n                }\n            }\n            throw error;\n        }\n    },\n\n    logout: () => {\n        localStorage.removeItem('user');\n    },\n\n    getCurrentUser: () => {\n        const user = localStorage.getItem('user');\n        return user ? JSON.parse(user) : null;\n    },\n};\n\nexport default authService; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,gCAAgC;AAEhD,MAAMC,WAAW,GAAG;EAChBC,KAAK,EAAE,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAC9B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAAC,GAAGN,OAAO,SAAS,EAAE;QACnDG,KAAK;QACLC;MACJ,CAAC,CAAC;MACF,IAAIC,QAAQ,CAACE,IAAI,CAACC,MAAM,EAAE;QACtBC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAACE,IAAI,CAAC,CAAC;MAC/D;MACA,OAAOF,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOM,KAAK,EAAE;MAAA,IAAAC,eAAA;MACZC,OAAO,CAACF,KAAK,CAAC,cAAc,EAAE,EAAAC,eAAA,GAAAD,KAAK,CAACR,QAAQ,cAAAS,eAAA,uBAAdA,eAAA,CAAgBP,IAAI,KAAIM,KAAK,CAACG,OAAO,CAAC;MACpE,MAAMH,KAAK;IACf;EACJ,CAAC;EAEDI,QAAQ,EAAE,MAAOC,QAAQ,IAAK;IAC1B,IAAI;MACA,MAAMb,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAAC,GAAGN,OAAO,SAAS,EAAE;QACnD,GAAGkB,QAAQ;QACXC,QAAQ,EAAED,QAAQ,CAACf,KAAK;QACxBiB,SAAS,EAAE;MACf,CAAC,CAAC;MACF,OAAOf,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOM,KAAK,EAAE;MAAA,IAAAQ,gBAAA,EAAAC,gBAAA;MACZP,OAAO,CAACF,KAAK,CAAC,iBAAiB,EAAE,EAAAQ,gBAAA,GAAAR,KAAK,CAACR,QAAQ,cAAAgB,gBAAA,uBAAdA,gBAAA,CAAgBd,IAAI,KAAIM,KAAK,CAACG,OAAO,CAAC;MACvE,KAAAM,gBAAA,GAAIT,KAAK,CAACR,QAAQ,cAAAiB,gBAAA,eAAdA,gBAAA,CAAgBf,IAAI,EAAE;QACtB,MAAMgB,MAAM,GAAGV,KAAK,CAACR,QAAQ,CAACE,IAAI;QAClC,IAAI,OAAOgB,MAAM,KAAK,QAAQ,EAAE;UAC5B,MAAMC,YAAY,GAAGC,MAAM,CAACC,OAAO,CAACH,MAAM,CAAC,CACtCI,GAAG,CAAC,CAAC,CAACC,KAAK,EAAEC,QAAQ,CAAC,KAAK,GAAGD,KAAK,KAAKC,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAC9DA,IAAI,CAAC,IAAI,CAAC;UACf,MAAM,IAAIC,KAAK,CAACP,YAAY,CAAC;QACjC;MACJ;MACA,MAAMX,KAAK;IACf;EACJ,CAAC;EAEDmB,MAAM,EAAEA,CAAA,KAAM;IACVvB,YAAY,CAACwB,UAAU,CAAC,MAAM,CAAC;EACnC,CAAC;EAEDC,cAAc,EAAEA,CAAA,KAAM;IAClB,MAAMC,IAAI,GAAG1B,YAAY,CAAC2B,OAAO,CAAC,MAAM,CAAC;IACzC,OAAOD,IAAI,GAAGxB,IAAI,CAAC0B,KAAK,CAACF,IAAI,CAAC,GAAG,IAAI;EACzC;AACJ,CAAC;AAED,eAAelC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}